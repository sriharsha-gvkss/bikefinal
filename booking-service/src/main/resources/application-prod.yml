spring:
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/biketaxi}
    username: ${SPRING_DATASOURCE_USERNAME:user}
    password: ${SPRING_DATASOURCE_PASSWORD:pass}
    driver-class-name: org.postgresql.Driver
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
  
  # Kafka configuration for Upstash
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    security:
      protocol: ${SPRING_KAFKA_SECURITY_PROTOCOL:SASL_SSL}
    sasl:
      mechanism: ${SPRING_KAFKA_SASL_MECHANISM:PLAIN}
      jaas:
        config: ${SPRING_KAFKA_SASL_JAAS_CONFIG:org.apache.kafka.common.security.plain.PlainLoginModule required username="your-username" password="your-password";}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: booking-service
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

server:
  port: ${PORT:8080}

logging:
  level:
    com.taxi.booking: INFO
    org.springframework.kafka: WARN
    org.apache.kafka: WARN

# Custom configuration
app:
  kafka:
    enabled: true
    topic: booking-events
  cors:
    allowed-origins: ${APP_CORS_ALLOWED_ORIGINS:https://your-frontend-url.onrender.com}

# Actuator configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: when-authorized 